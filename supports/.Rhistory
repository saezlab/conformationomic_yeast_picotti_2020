nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2])
{
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot"
}
return(new_type)
})
?switch()
nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2],
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot")
return(new_type)
})
View(nodes)
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip.att")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip.sif")
write_tsv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip.att")
write_tsv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip.sif")
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
kinase_network <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
kinase_network <- kinase_network[kinase_network$psite %in% row.names(phospho_for_viper),]
kinase_network <- unique(kinase_network[,c(6,7,5)])
sub_part <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
sub_part <- sub_part[sub_part$psite %in% row.names(phospho_for_viper),]
sub_part <- unique(sub_part[,c(5,2)])
sub_part$action <- 1
kinase_network$action <- ifelse(kinase_network$action == "kinase",1,-1)
names(kinase_network) <- c("source","sign","target")
names(sub_part) <- c("source","target","sign")
kinase_network <- as.data.frame(rbind(kinase_network,sub_part))
nodes <- as.data.frame(unique(c(kinase_network$source, kinase_network$target)))
names(nodes) <- "id"
nodes$type <- ifelse(grepl("_",nodes$id),"psite","prot")
nodes$type <- ifelse(nodes$id %in% biogrid_yeast_KSN$kinase, "kinase",nodes$type)
nodes$value <- NA
for(node in nodes$id)
{
if(node %in% row.names(phospho_for_viper))
{
nodes[nodes$id == node,"value"] <- phospho_for_viper[node,]
}
}
for(node in nodes$id)
{
if(node %in% row.names(kinact))
{
nodes[nodes$id == node,"value"] <- kinact[node,]
}
}
Table1 <- as.data.frame(
read_delim("~/Dropbox/conformationomic_yeast_picotti_2020/data/Table1.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
changing_prots <- Table1[Table1$`Qvalue(LiP)` <= 0.1 & abs(Table1$`Log2FC(LiP_norm)`) > 1,]
changing_prots <- changing_prots[,c(2,7)]
batches <- changing_prots %>% group_by(Gene_name) %>% summarise_each(funs(min(abs(.))))
batches <- as.data.frame(batches)
row.names(batches) <- batches$Gene_name
for(node in nodes$id)
{
if(is.na(nodes[nodes$id == node,3]))
{
if(node %in% row.names(batches))
{
nodes[nodes$id == node,"value"] <- batches[node,2]
}
}
}
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "red","blue")
nodes$shape <- sapply(nodes$type, function(x)
{
switch(x, "prot" = "circle", "psite" = "star", "kinase" = "diamond")
})
edges <- kinase_network
names(edges) <- c("from","sign","to")
edges$arrows <- "to"
to_filter <- edges
to_filter$source_value <- NA
to_filter$target_value <- NA
for(i in 1:length(to_filter[,1]))
{
to_filter[i,"source_value"] <- nodes[nodes$id == to_filter[i,1],3]
to_filter[i,"target_value"] <- nodes[nodes$id == to_filter[i,3],3]
}
to_filter$to_keep <- TRUE
for(i in 1:length(to_filter[,1]))
{
if(grepl("_",to_filter[i,3]))
{
if(sign(to_filter[i,"source_value"]) == sign(to_filter[i,"sign"]) * sign(to_filter[i,"target_value"]))
{
to_filter[i,"to_keep"] <- TRUE
} else
{
to_filter[i,"to_keep"] <- FALSE
}
}
}
edges <- edges[to_filter$to_keep,]
edges <- edges[!grepl("_",edges$from) | edges$from %in% edges$to,]
edges$color <- ifelse(edges$sign > 0, "red", "blue")
edges$width <- 4
# nodes$value <- abs(nodes$value)
nodes <- nodes[(nodes$id %in% edges$from | nodes$id %in% edges$to),] #need tofilter lonely psites too
nodes <- nodes[complete.cases(nodes),]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
edges <- edges[!(grepl("_",edges$to)) | edges$to %in% edges$from,]
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2],
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot")
return(new_type)
})
##
##
library(visNetwork)
visNetwork(nodes = nodes, edges = edges)
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
nodes$label <- gsub(".*_","",nodes$label)
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
View(batches)
nodes$label_nocap <- nodes$label
nodes$label_nocap <- tolower(nodes$label)
CapStr <- function(y) {
c <- strsplit(y, " ")[[1]]
paste(toupper(substring(c, 1,1)), substring(c, 2),
sep="", collapse=" ")
}
nodes$label_nocap <- sapply(nodes$label_nocap, CapStr)
View(nodes)
write_csv(nodes[,c(1,7)],"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att_nocaps.csv")
View(phospho_for_viper)
phospho_for_viper["HXT1_S46"]
phospho_for_viper["HXT1_S46",]
kinase_network <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
kinase_network <- kinase_network[kinase_network$psite %in% row.names(phospho_for_viper),]
kinase_network <- unique(kinase_network[,c(6,7,5)])
sub_part <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
sub_part <- sub_part[sub_part$psite %in% row.names(phospho_for_viper),]
sub_part <- unique(sub_part[,c(5,2)])
sub_part$action <- 1
kinase_network$action <- ifelse(kinase_network$action == "kinase",1,-1)
names(kinase_network) <- c("source","sign","target")
names(sub_part) <- c("source","target","sign")
kinase_network <- as.data.frame(rbind(kinase_network,sub_part))
nodes <- as.data.frame(unique(c(kinase_network$source, kinase_network$target)))
names(nodes) <- "id"
nodes$type <- ifelse(grepl("_",nodes$id),"psite","prot")
nodes$type <- ifelse(nodes$id %in% biogrid_yeast_KSN$kinase, "kinase",nodes$type)
nodes$value <- NA
for(node in nodes$id)
{
if(node %in% row.names(phospho_for_viper))
{
nodes[nodes$id == node,"value"] <- phospho_for_viper[node,]
}
}
for(node in nodes$id)
{
if(node %in% row.names(kinact))
{
nodes[nodes$id == node,"value"] <- kinact[node,]
}
}
Table1 <- as.data.frame(
read_delim("~/Dropbox/conformationomic_yeast_picotti_2020/data/Table1.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
changing_prots <- Table1[Table1$`Qvalue(LiP)` <= 0.1 & abs(Table1$`Log2FC(LiP_norm)`) > 1,]
changing_prots <- changing_prots[,c(2,7)]
batches <- changing_prots %>% group_by(Gene_name) %>% summarise_each(funs(min(abs(.))))
batches <- as.data.frame(batches)
row.names(batches) <- batches$Gene_name
for(node in nodes$id)
{
if(is.na(nodes[nodes$id == node,3]))
{
if(node %in% row.names(batches))
{
nodes[nodes$id == node,"value"] <- batches[node,2]
}
}
}
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "red","blue")
nodes$shape <- sapply(nodes$type, function(x)
{
switch(x, "prot" = "circle", "psite" = "star", "kinase" = "diamond")
})
edges <- kinase_network
names(edges) <- c("from","sign","to")
edges$arrows <- "to"
to_filter <- edges
to_filter$source_value <- NA
to_filter$target_value <- NA
for(i in 1:length(to_filter[,1]))
{
to_filter[i,"source_value"] <- nodes[nodes$id == to_filter[i,1],3]
to_filter[i,"target_value"] <- nodes[nodes$id == to_filter[i,3],3]
}
to_filter$to_keep <- TRUE
for(i in 1:length(to_filter[,1]))
{
if(grepl("_",to_filter[i,3]))
{
if(sign(to_filter[i,"source_value"]) == sign(to_filter[i,"sign"]) * sign(to_filter[i,"target_value"]))
{
to_filter[i,"to_keep"] <- TRUE
} else
{
to_filter[i,"to_keep"] <- FALSE
}
}
}
edges <- edges[to_filter$to_keep,]
edges <- edges[!grepl("_",edges$from) | edges$from %in% edges$to,]
edges$color <- ifelse(edges$sign > 0, "red", "blue")
edges$width <- 4
# nodes$value <- abs(nodes$value)
nodes <- nodes[(nodes$id %in% edges$from | nodes$id %in% edges$to),] #need tofilter lonely psites too
nodes <- nodes[complete.cases(nodes),]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
edges <- edges[!(grepl("_",edges$to)) | edges$to %in% edges$from,]
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2],
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot")
return(new_type)
})
##
##
library(visNetwork)
nodes <- nodes[!grepl("_",nodes$id) | nodes$value > 1.7,]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
visNetwork(nodes = nodes, edges = edges)
View(phospho_full)
kinase_network <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
kinase_network <- kinase_network[kinase_network$psite %in% row.names(phospho_for_viper),]
kinase_network <- unique(kinase_network[,c(6,7,5)])
sub_part <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
sub_part <- sub_part[sub_part$psite %in% row.names(phospho_for_viper),]
sub_part <- unique(sub_part[,c(5,2)])
sub_part$action <- 1
kinase_network$action <- ifelse(kinase_network$action == "kinase",1,-1)
names(kinase_network) <- c("source","sign","target")
names(sub_part) <- c("source","target","sign")
kinase_network <- as.data.frame(rbind(kinase_network,sub_part))
nodes <- as.data.frame(unique(c(kinase_network$source, kinase_network$target)))
names(nodes) <- "id"
nodes$type <- ifelse(grepl("_",nodes$id),"psite","prot")
nodes$type <- ifelse(nodes$id %in% biogrid_yeast_KSN$kinase, "kinase",nodes$type)
nodes$value <- NA
for(node in nodes$id)
{
if(node %in% row.names(phospho_for_viper))
{
nodes[nodes$id == node,"value"] <- phospho_for_viper[node,]
}
}
for(node in nodes$id)
{
if(node %in% row.names(kinact))
{
nodes[nodes$id == node,"value"] <- kinact[node,]
}
}
Table1 <- as.data.frame(
read_delim("~/Dropbox/conformationomic_yeast_picotti_2020/data/Table1.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
changing_prots <- Table1[Table1$`Qvalue(LiP)` <= 0.1 & abs(Table1$`Log2FC(LiP_norm)`) > 1,]
changing_prots <- changing_prots[,c(2,7)]
batches <- changing_prots %>% group_by(Gene_name) %>% summarise_each(funs(min(abs(.))))
batches <- as.data.frame(batches)
row.names(batches) <- batches$Gene_name
for(node in nodes$id)
{
if(is.na(nodes[nodes$id == node,3]))
{
if(node %in% row.names(batches))
{
nodes[nodes$id == node,"value"] <- batches[node,2]
}
}
}
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "red","blue")
nodes$shape <- sapply(nodes$type, function(x)
{
switch(x, "prot" = "circle", "psite" = "star", "kinase" = "diamond")
})
edges <- kinase_network
names(edges) <- c("from","sign","to")
edges$arrows <- "to"
to_filter <- edges
to_filter$source_value <- NA
to_filter$target_value <- NA
for(i in 1:length(to_filter[,1]))
{
to_filter[i,"source_value"] <- nodes[nodes$id == to_filter[i,1],3]
to_filter[i,"target_value"] <- nodes[nodes$id == to_filter[i,3],3]
}
to_filter$to_keep <- TRUE
for(i in 1:length(to_filter[,1]))
{
if(grepl("_",to_filter[i,3]))
{
if(sign(to_filter[i,"source_value"]) == sign(to_filter[i,"sign"]) * sign(to_filter[i,"target_value"]))
{
to_filter[i,"to_keep"] <- TRUE
} else
{
to_filter[i,"to_keep"] <- FALSE
}
}
}
edges <- edges[to_filter$to_keep,]
edges <- edges[!grepl("_",edges$from) | edges$from %in% edges$to,]
edges$color <- ifelse(edges$sign > 0, "red", "blue")
edges$width <- 4
# nodes$value <- abs(nodes$value)
nodes <- nodes[(nodes$id %in% edges$from | nodes$id %in% edges$to),] #need tofilter lonely psites too
nodes <- nodes[complete.cases(nodes),]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
edges <- edges[!(grepl("_",edges$to)) | edges$to %in% edges$from,]
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2],
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot")
return(new_type)
})
##
##
library(visNetwork)
nodes <- nodes[!grepl("_",nodes$id) | abs(nodes$value) > 1.5,]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
visNetwork(nodes = nodes, edges = edges)
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to]
visNetwork(nodes = nodes, edges = edges)
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
visNetwork(nodes = nodes, edges = edges)
nodes$label <- gsub(".*_","",nodes$label)
nodes$label_nocap <- tolower(nodes$label)
nodes$label_nocap <- sapply(nodes$label_nocap, CapStr)
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(nodes[,c(1,7)],"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att_nocaps.csv")
nodes$kinase_Act <- NA
nodes$lipFC <- NA
nodes$phospho_t_val <- NA
View(nodes)
nodes$kinase_Act <- ifelse(nodes$type == "kinase" | nodes$type == "phosphatase", nodes$value, NA)
View(nodes)
nodes$lipFC <- ifelse(nodes$type == "protein", nodes$value, NA)
nodes$kinase_Act <- ifelse(nodes$type == "kinase" | nodes$type == "phosphatase", nodes$value, NA)
nodes$lipFC <- ifelse(nodes$type == "prot", nodes$value, NA)
nodes$phospho_t_val <- ifelse(nodes$type == "psite", nodes$value, NA)
nodes$value_adjusted <- ifelse(nodes$type == "kinase" | nodes$type == "phosphatase", nodes$value, NA)
nodes$value_adjusted <- ifelse(nodes$type == "prot", nodes$value + 100, NA)
nodes$value_adjusted <- ifelse(nodes$type == "psite", nodes$value - 100, NA)
nodes$value_adjusted <- nodes$value
nodes$value_adjusted <- ifelse(nodes$type == "prot", nodes$value + 100, nodes$value)
nodes$value_adjusted <- ifelse(nodes$type == "psite", nodes$value - 100, nodes$value)
nodes$value_adjusted <- nodes$value
nodes$value_adjusted <- ifelse(nodes$type == "prot", nodes$value + 100, nodes$value)
nodes$value_adjusted <- ifelse(nodes$type == "psite", nodes$value - 100, nodes$value)
nodes$value_adjusted <- nodes$value
nodes$value_adjusted <- ifelse(nodes$type == "prot", nodes$value + 100, nodes$value_adjusted)
nodes$value_adjusted <- ifelse(nodes$type == "psite", nodes$value - 100, nodes$value_adjusted)
kinase_network <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
kinase_network <- kinase_network[kinase_network$psite %in% row.names(phospho_for_viper),]
kinase_network <- unique(kinase_network[,c(6,7,5)])
sub_part <- biogrid_yeast_KSN[biogrid_yeast_KSN$kinase %in% row.names(kinact),]
sub_part <- sub_part[sub_part$psite %in% row.names(phospho_for_viper),]
sub_part <- unique(sub_part[,c(5,2)])
sub_part$action <- 1
kinase_network$action <- ifelse(kinase_network$action == "kinase",1,-1)
names(kinase_network) <- c("source","sign","target")
names(sub_part) <- c("source","target","sign")
kinase_network <- as.data.frame(rbind(kinase_network,sub_part))
nodes <- as.data.frame(unique(c(kinase_network$source, kinase_network$target)))
names(nodes) <- "id"
nodes$type <- ifelse(grepl("_",nodes$id),"psite","prot")
nodes$type <- ifelse(nodes$id %in% biogrid_yeast_KSN$kinase, "kinase",nodes$type)
nodes$value <- NA
for(node in nodes$id)
{
if(node %in% row.names(phospho_for_viper))
{
nodes[nodes$id == node,"value"] <- phospho_for_viper[node,]
}
}
for(node in nodes$id)
{
if(node %in% row.names(kinact))
{
nodes[nodes$id == node,"value"] <- kinact[node,]
}
}
Table1 <- as.data.frame(
read_delim("~/Dropbox/conformationomic_yeast_picotti_2020/data/Table1.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
changing_prots <- Table1[Table1$`Qvalue(LiP)` <= 0.1 & abs(Table1$`Log2FC(LiP_norm)`) > 1,]
changing_prots <- changing_prots[,c(2,7)]
batches <- changing_prots %>% group_by(Gene_name) %>% summarise_each(funs(min(abs(.))))
batches <- as.data.frame(batches)
row.names(batches) <- batches$Gene_name
for(node in nodes$id)
{
if(is.na(nodes[nodes$id == node,3]))
{
if(node %in% row.names(batches))
{
nodes[nodes$id == node,"value"] <- batches[node,2]
}
}
}
nodes$label <- nodes$id
nodes$color <- ifelse(nodes$value > 0, "red","blue")
nodes$shape <- sapply(nodes$type, function(x)
{
switch(x, "prot" = "circle", "psite" = "star", "kinase" = "diamond")
})
edges <- kinase_network
names(edges) <- c("from","sign","to")
edges$arrows <- "to"
to_filter <- edges
to_filter$source_value <- NA
to_filter$target_value <- NA
for(i in 1:length(to_filter[,1]))
{
to_filter[i,"source_value"] <- nodes[nodes$id == to_filter[i,1],3]
to_filter[i,"target_value"] <- nodes[nodes$id == to_filter[i,3],3]
}
to_filter$to_keep <- TRUE
for(i in 1:length(to_filter[,1]))
{
if(grepl("_",to_filter[i,3]))
{
if(sign(to_filter[i,"source_value"]) == sign(to_filter[i,"sign"]) * sign(to_filter[i,"target_value"]))
{
to_filter[i,"to_keep"] <- TRUE
} else
{
to_filter[i,"to_keep"] <- FALSE
}
}
}
edges <- edges[to_filter$to_keep,]
edges <- edges[!grepl("_",edges$from) | edges$from %in% edges$to,]
edges$color <- ifelse(edges$sign > 0, "red", "blue")
edges$width <- 4
# nodes$value <- abs(nodes$value)
nodes <- nodes[(nodes$id %in% edges$from | nodes$id %in% edges$to),] #need tofilter lonely psites too
nodes <- nodes[complete.cases(nodes),]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
edges <- edges[!(grepl("_",edges$to)) | edges$to %in% edges$from,]
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
nodes$type <- apply(nodes,1,function(x)
{
new_type <- switch(x[2],
"kinase" = ifelse(sum(edges[edges$from == x[1],2]) < 0, "phosphatase", "kinase"),
"psite" = "psite",
"prot" = "prot")
return(new_type)
})
##
##
library(visNetwork)
nodes <- nodes[!grepl("_",nodes$id) | abs(nodes$value) > 1.5,]
edges <- edges[edges$from %in% nodes$id & edges$to %in% nodes$id,]
nodes <- nodes[nodes$id %in% edges$from | nodes$id %in% edges$to,]
visNetwork(nodes = nodes, edges = edges)
nodes$kinase_Act <- ifelse(nodes$type == "kinase" | nodes$type == "phosphatase", nodes$value, NA)
nodes$lipFC <- ifelse(nodes$type == "prot", nodes$value, NA)
nodes$phospho_t_val <- ifelse(nodes$type == "psite", nodes$value, NA)
nodes$value_adjusted <- nodes$value
nodes$value_adjusted <- ifelse(nodes$type == "prot", nodes$value + 100, nodes$value_adjusted)
nodes$value_adjusted <- ifelse(nodes$type == "psite", nodes$value - 100, nodes$value_adjusted)
nodes$label <- gsub(".*_","",nodes$label)
nodes$label_nocap <- tolower(nodes$label)
nodes$label_nocap <- sapply(nodes$label_nocap, CapStr)
write_csv(nodes,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att.csv")
write_csv(edges,"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_sif.csv")
write_csv(nodes[,c(1,7)],"~/Dropbox/conformationomic_yeast_picotti_2020/results/network_kinase_phospho_lip_att_nocaps.csv")
View(batches)
View(phospho_osmo_full)
View(phospho_full)
View(biogrid_yeast_KSN)
View(phospho_osmo_full)
View(phospho_full)
View(biogrid_yeast_KSN)
View(batches)
View(Table1)
View(kinact)
View(nodes)
