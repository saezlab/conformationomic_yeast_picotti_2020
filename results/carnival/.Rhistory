}
kegg_mapping <- kegg_mapping[-c(1:110),]
kegg_mapping[,1] <- tolower(kegg_mapping[,1])
metabolomic_limma_t$metabolite <- tolower(metabolomic_limma_t$metabolite)
metabolomic_limma_t <- merge(metabolomic_limma_t, kegg_mapping, by = "metabolite")
metabolomic_limma_t <- metabolomic_limma_t[,c(6,2,3,4,5)]
##########################
# reaction_set_list <- list()
# for(i in 1:10)
# {
#   print(i)
#   pen <- i/10
#   reaction_set_list[[i]] <- target_set_from_forest(tree_without_cofactors, metabolomic_limma_t$KEGG, penalty = pen)
# }
#
# save.image(file = "~/Dropbox/marco_metactivity/support/reaction_set_list_splitted_with_ASS1_no_cofac_marco_plasmax_2.RData")
load("~/Dropbox/marco_metactivity/support/reaction_set_list_splitted_with_ASS1_no_cofac_marco_plasmax_2.RData")
for(i in 1:length(reaction_set_list))
{
reaction_set <- reaction_set_list[[i]]
reaction_set <- reaction_set %>% group_by(set,targets) %>% summarise_each(funs(sum(., na.rm = TRUE)))
reaction_set <- as.data.frame(reaction_set)
reaction_set[,2] <- gsub("_[a-z]$","",reaction_set[,2])
reaction_set <- reaction_set %>% group_by(set,targets) %>% summarise_each(funs(mean(., na.rm = TRUE)))
reaction_set <- as.data.frame(reaction_set)
# reaction_set$weight <- abs(reaction_set$weight)
reaction_set_list[[i]] <- reaction_set
}
penalty <- 6
n <- length(unique(reaction_set_list[[penalty]][,1]))
regulonNames = unique(reaction_set_list[[penalty]][,1])[1:n]
regulons_df <- reaction_set_list[[penalty]]
regulons_df <- regulons_df[regulons_df[,1] %in% unique(regulons_df[,1])[1:n],]
mean_NES_df <- metactivity(metabolomic_t_table = metabolomic_limma_t,
regulons_df = regulons_df,
compartment_pattern = "_[a-z]$",
k = 10000)
write_csv(mean_NES_df, "~/Dropbox/marco_metactivity/results/metactivity_plasmax_2.csv")
write_csv(ttop_Plasmax_786, "~/Dropbox/marco_metactivity/results/ttop_plasmax_2_786.csv")
write_csv(ttop_Plasmax_786, "~/Dropbox/marco_metactivity/results/ttop_plasmax_2_786.csv")
write_csv(ttop_Plasmax_M1A, "~/Dropbox/marco_metactivity/results/ttop_plasmax_2_M1A.csv")
write_csv(ttop_Plasmax_M2A, "~/Dropbox/marco_metactivity/results/ttop_plasmax_2_M2A.csv")
write_csv(ttop_Plasmax_M1Av786, "~/Dropbox/marco_metactivity/results/ttop_plasmax_2_M1Av786.csv")
library(readr)
CARNI_sif_res <- as.data.frame(read_csv("Dropbox/marco_metactivity/results/phosphoproteomic/results/CARNI_sif_res.csv"))
library(readr)
CARNI_sif_res <- as.data.frame(read_csv("Dropbox/marco_metactivity/results/phosphoproteomic/results/CARNI_sif_res.csv"))
phonemes_res <- as.data.frame(read_delim("Dropbox/marco_metactivity/results/phosphoproteomic/results_no_carni/phonemes_res.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
CARNI_nodes <- unique(c(CARNI_sif_res$Node1,CARNI_sif_res$Node2))
CARNI_nodes <- unique(c(CARNI_sif_res$Node1,CARNI_sif_res$Node2))
phonemes_nodes <- unique(c(phonemes_res$Source,phonemes_res$Target))
sum(CARNI_nodes %in% phonemes_nodes)
sum(CARNI_nodes %in% phonemes_nodes)/length(CARNI_nodes)
sum(CARNI_nodes %in% phonemes_nodes)/length(CARNI_nodes)
sum(phonemes_nodes %in% CARNI_nodes)/length(phonemes_nodes)
length(phonemes_nodes)/length(CARNI_nodes)
library(igraph)
View(CARNI_sif_res)
CARNI_igraph <- graph_from_edgelist(CARNI_sif_res[,c(1,3)])
CARNI_igraph <- graph_from_edgelist(as.matrix(CARNI_sif_res[,c(1,3)]))
phonemes_igraph <- graph_from_edgelist(as.matrix(phonemes_res$Source,phonemes_res$Target))
View(phonemes_res)
phonemes_igraph <- graph_from_edgelist(as.matrix(phonemes_res[,c(1,3)]))
library(omicToolsTest)
View(df_to_viper_regulon)
library(R.matlab)
library(stringr)
library(readr)
recon3D <- readMat("Dropbox/Meta_PKN/recon3D_netowrk/Recon3DModel_301.mat")
View(recon3D)
library(readr)
library(omicToolsTest)
library(vsn)
library(limma)
library(viper)
phosphoproteomic <- as.data.frame(read_delim("Dropbox/marco_metactivity/data/phosphoproteomic.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
phosphoproteomic <- phosphoproteomic[phosphoproteomic$`Localization prob` > 0.9 & !is.na(phosphoproteomic$`Gene names`),]
phospho_ID <- paste(gsub(";.*","",phosphoproteomic$`Gene names`), gsub(";.*","",phosphoproteomic$`Amino acid`), sep = "_")
phospho_ID <- paste(phospho_ID,gsub(";.*","",phosphoproteomic$`Positions within proteins`), sep = "")
phosphoproteomic <- phosphoproteomic[,c(130:149)]
row.names(phosphoproteomic) <- phospho_ID
phosphoproteomic[phosphoproteomic == 0] <- NA
names(phosphoproteomic) <- gsub("Intensity ","",names(phosphoproteomic))
targets <- as.data.frame(matrix(NA,length(phosphoproteomic[1,]),2))
names(targets) <- c("sample","condition")
targets$sample <- names(phosphoproteomic)
targets$condition <- gsub("_.*","",targets$sample)
# magicPlotMaker(log2(phosphoproteomic), "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/raw_log2/",targets)
dev.off()
fit <- vsnMatrix(as.matrix(phosphoproteomic))
meanSdPlot(fit)
phosphoproteomic <- as.data.frame(vsn::predict(fit,as.matrix(phosphoproteomic)))
# magicPlotMaker(phosphoproteomic, "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/vsn/",targets)
dev.off()
comparisons <- list("c786"=c(3,-4),"M1A"=c(1,-4),"M2A"=c(2,-4))
limmaRes <- runLimma(phosphoproteomic,targets,comparisons)
ttop_c786 <- ttopFormatter(topTable(limmaRes[[1]],1,12343,adjust.method = "fdr"))
ttop_M1A <- ttopFormatter(topTable(limmaRes[[1]],2,12343,adjust.method = "fdr"))
ttop_M2A <- ttopFormatter(topTable(limmaRes[[1]],3,12343,adjust.method = "fdr"))
t_table <- merge(ttop_c786[,c(1,4)],ttop_M1A[,c(1,4)], by = "ID")
t_table <- merge(t_table,ttop_M2A[,c(1,4)], by = "ID")
names(t_table) <- c("ID","786-O","M1A","M2A")
########
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
omnipath_ptm <- omnipath_ptm[omnipath_ptm$modification %in% c("dephosphorylation","phosphorylation"),]
KSN <- omnipath_ptm[,c(4,3)]
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_type, sep ="_")
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_offset, sep = "")
KSN$sign <- ifelse(omnipath_ptm$modification == "phosphorylation", 1, -1)
KSN_viper <- df_to_viper_regulon(KSN)
eset <- t_table[,c(2,3,4)]
row.names(eset) <- t_table$ID
Kin_activity <- as.data.frame(viper(eset = eset, regulon = KSN_viper, minsize = 5, adaptive.size = F, eset.filter = F))
Kin_activity$kinase <- row.names(Kin_activity)
View(Kin_activity)
library(readr)
library(omicToolsTest)
library(vsn)
library(limma)
library(viper)
phosphoproteomic <- as.data.frame(read_delim("Dropbox/marco_metactivity/data/phosphoproteomic.txt",
"\t", escape_double = FALSE, trim_ws = TRUE))
phosphoproteomic <- phosphoproteomic[phosphoproteomic$`Localization prob` > 0.9 & !is.na(phosphoproteomic$`Gene names`),]
phospho_ID <- paste(gsub(";.*","",phosphoproteomic$`Gene names`), gsub(";.*","",phosphoproteomic$`Amino acid`), sep = "_")
phospho_ID <- paste(phospho_ID,gsub(";.*","",phosphoproteomic$`Positions within proteins`), sep = "")
phosphoproteomic <- phosphoproteomic[,c(130:149)]
row.names(phosphoproteomic) <- phospho_ID
phosphoproteomic[phosphoproteomic == 0] <- NA
names(phosphoproteomic) <- gsub("Intensity ","",names(phosphoproteomic))
targets <- as.data.frame(matrix(NA,length(phosphoproteomic[1,]),2))
names(targets) <- c("sample","condition")
targets$sample <- names(phosphoproteomic)
targets$condition <- gsub("_.*","",targets$sample)
# magicPlotMaker(log2(phosphoproteomic), "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/raw_log2/",targets)
dev.off()
fit <- vsnMatrix(as.matrix(phosphoproteomic))
meanSdPlot(fit)
phosphoproteomic <- as.data.frame(vsn::predict(fit,as.matrix(phosphoproteomic)))
# magicPlotMaker(phosphoproteomic, "~/Dropbox/marco_metactivity/visualisation/phosphoproteomic/vsn/",targets)
dev.off()
comparisons <- list("c786"=c(3,-4),"M1A"=c(1,-4),"M2A"=c(2,-4))
limmaRes <- runLimma(phosphoproteomic,targets,comparisons)
ttop_c786 <- ttopFormatter(topTable(limmaRes[[1]],1,12343,adjust.method = "fdr"))
ttop_M1A <- ttopFormatter(topTable(limmaRes[[1]],2,12343,adjust.method = "fdr"))
ttop_M2A <- ttopFormatter(topTable(limmaRes[[1]],3,12343,adjust.method = "fdr"))
t_table <- merge(ttop_c786[,c(1,4)],ttop_M1A[,c(1,4)], by = "ID")
t_table <- merge(t_table,ttop_M2A[,c(1,4)], by = "ID")
names(t_table) <- c("ID","786-O","M1A","M2A")
########
url <- paste0(
'http://omnipathdb.org/ptms?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath_ptm <- download_omnipath()
omnipath_ptm <- omnipath_ptm[omnipath_ptm$modification %in% c("dephosphorylation","phosphorylation"),]
KSN <- omnipath_ptm[,c(4,3)]
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_type, sep ="_")
KSN$substrate_genesymbol <- paste(KSN$substrate_genesymbol,omnipath_ptm$residue_offset, sep = "")
KSN$sign <- ifelse(omnipath_ptm$modification == "phosphorylation", 1, -1)
KSN_viper <- df_to_viper_regulon(KSN)
eset <- t_table[,c(2,3,4)]
row.names(eset) <- t_table$ID
Kin_activity <- as.data.frame(viper(eset = eset, regulon = KSN_viper, minsize = 5, adaptive.size = F, eset.filter = F))
Kin_activity$kinase <- row.names(Kin_activity)
write_csv(ttop_c786, "~/Dropbox/marco_metactivity/results/phosphoproteomic/results/ttop_c786.csv")
write_csv(ttop_M1A, "~/Dropbox/marco_metactivity/results/phosphoproteomic/results/ttop_M1A.csv")
write_csv(ttop_M2A, "~/Dropbox/marco_metactivity/results/phosphoproteomic/results/ttop_M2A.csv")
write_csv(Kin_activity[,c(4,1,2,3)],"~/Dropbox/marco_metactivity/results/phosphoproteomic/results/kinact.csv")
###############
carni_test <- as.data.frame(t(sign(Kin_activity[abs(Kin_activity[,1]) > 2.5,1])))
names(carni_test) <- Kin_activity[abs(Kin_activity[,1]) > 2.5,"kinase"]
names(carni_test) <- gsub("[-+{},;() ]","___",names(carni_test))
write_tsv(carni_test,"~/Dropbox/marco_metactivity/results/phosphoproteomic/input_carni.tsv")
phospho_carni <- as.data.frame(t(sign(ttop_c786[ttop_c786$adj.P.Val <= 0.05 & ttop_c786$ID %in% KSN$substrate_genesymbol,4])))
names(phospho_carni) <- ttop_c786[ttop_c786$adj.P.Val <= 0.05 & ttop_c786$ID %in% KSN$substrate_genesymbol,1]
names(phospho_carni) <- gsub("[-+{},;() ]","___",names(phospho_carni))
write_tsv(phospho_carni,"~/Dropbox/marco_metactivity/results/phosphoproteomic/meas_carni.tsv")
KSN_carni <- KSN[,c(2,3,1)]
names(KSN_carni) <- c("source","sign","target")
url <- paste0(
'http://omnipathdb.org/interactions?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath <- download_omnipath()
omnipath <- omnipath[omnipath$is_stimulation != 0 | omnipath$is_inhibition != 0,]
omnipath_sif <- omnipath[omnipath$is_stimulation ==1,c(3,6,4)]
omnipath_sif_2 <- omnipath[omnipath$is_inhibition ==1,c(3,7,4)]
names(omnipath_sif) <- c("source","sign","target")
names(omnipath_sif_2) <- c("source","sign","target")
View(omnipath_sif_2)
omnipath_sif_2$sign <- -1
omnipath_sif <- as.data.frame(rbind(omnipath_sif,omnipath_sif_2))
carni_sif <- unique(as.data.frame(rbind(omnipath_sif,KSN_carni)))
carni_sif$source <- gsub("[-+{},;() ]","___",carni_sif$source)
carni_sif$target <- gsub("[-+{},;() ]","___",carni_sif$target)
write_tsv(carni_sif,"~/Dropbox/marco_metactivity/results/phosphoproteomic/sif_carni.tsv")
library(readr)
library(piano)
library(omicToolsTest)
sif_carni <- as.data.frame(read_delim("Dropbox/marco_metactivity/results/phosphoproteomic/sif_carni.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
bg <- unique(c(gsub("_.*","",sif_carni$source),gsub("_.*","",sif_carni$target)))
CARNI_att_res <- as.data.frame(read_csv("Dropbox/marco_metactivity/results/phosphoproteomic/results/CARNI_att_res.csv"))
sucesses <- unique(gsub("_.*","",CARNI_att_res$Nodes))
pathways <- gmt_to_csv("~/Documents/GDC_KIRK/c2.cp.v7.0.symbols.gmt")
sig_pathways <- runGSAhyper(sucesses, universe = bg, gsc = loadGSC(pathways))
sig_pathways_df <- as.data.frame(sig_pathways$resTab)
input_carni <- as.data.frame(read_delim("Dropbox/marco_metactivity/results/phosphoproteomic/input_carni.tsv",
"\t", escape_double = FALSE, trim_ws = TRUE))
kinases <- as.data.frame(t(input_carni))
sig_pathways_df$sign <- unlist(lapply(row.names(sig_pathways_df), function(x, kinases, pathways){
return(mean(kinases[row.names(kinases) %in% pathways[pathways$term == x,1],1]))
},kinases = kinases, pathways = pathways))
sig_pathways_df <- sig_pathways_df[!is.nan(sig_pathways_df$sign),]
KEGG <- sig_pathways_df[grep("KEGG",row.names(sig_pathways_df)),c(1,2,7)]
KEGG <- KEGG[KEGG$`Adjusted p-value` <= 0.05,]
KEGG$pathway <- row.names(KEGG)
KEGG <- KEGG[,c(4,1,2,3)]
KEGG$pathway <- gsub("KEGG_","",KEGG$pathway)
View(KEGG)
load("~/Dropbox/kidney_cancer_multiomic_pipeline/results/multi_omic/final_sample/carnival_backup/results_CARNIVAL.Rdata")
sif <- as.data.frame(CARNIVAL_Result[[1]]$weightedSIF)
View(sif)
sif2 <- as.data.frame(CARNIVAL_Result2[[1]]$weightedSIF)
View(sif2)
library(readr)
metactivity_plasmax_2 <- read_csv("Dropbox/marco_metactivity/results/metactivity_plasmax_2.csv")
View(metactivity_plasmax_2)
library(readr)
ttop_plasmax_2_M1A <- read_csv("Dropbox/marco_metactivity/results/ttop_plasmax_2_M1A.csv")
View(ttop_plasmax_2_M1A)
knitr::opts_chunk$set(echo = TRUE)
draw_colnames_45 <- function (coln, ...) {
m = length(coln)
x = (1:m)/m - 1/2/m
grid.text(coln, x = x, y = unit(0.96, "npc"), vjust = .5,
hjust = 1, rot = 45, gp = gpar(...)) ## Was 'hjust=0' and 'rot=270'
}
## For pheatmap_1.0.8 and later:
draw_colnames_45 <- function (coln, gaps, ...) {
coord = pheatmap:::find_coordinates(length(coln), gaps)
x = coord$coord - 0.5 * coord$size
res = textGrob(coln, x = x, y = unit(1, "npc") - unit(3,"bigpts"), vjust = 0.5, hjust = 1, rot = 45, gp = gpar(...))
return(res)}
## 'Overwrite' default draw_colnames with your own version
assignInNamespace(x="draw_colnames", value="draw_colnames_45",
ns=asNamespace("pheatmap"))
library(readr)
library(omicToolsTest)
library(vsn)
library(limma)
library(viper)
library(pheatmap)
library(ggplot2)
library(grid)
progenyScatter <- function(df,weight_matrix,dfID = 1, weightID = 1, statName = "gene stats")
{
plot_list_contrasts <- list(0)
for (i in 2:length(df[1,]))
{
plot_list_pathways <- list(0)
for (j in 2:length(weight_matrix[1,]))
{
sub_df <- df[,c(dfID,i)]
pathway_weights <- weight_matrix[,c(weightID,j)]
names(sub_df) <- c("ID","stat")
minstat <- min(sub_df$stat)
maxstat <- max(sub_df$stat)
histo <- ggplot(sub_df, aes(x = stat, fill = "blue")) + geom_density() + coord_flip() + scale_fill_manual( values = c("#00c5ff")) + xlim(minstat, maxstat) + theme_minimal() + theme(legend.position = "none", axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank())
names(pathway_weights) <- c("ID","weight")
pathway_weights <- pathway_weights[pathway_weights$weight != 0,]
percentile <- ecdf(sub_df$stat)
sub_df <- merge(sub_df,pathway_weights,by = "ID")
sub_df$color <- "3"
sub_df[(sub_df$weight > 0 & sub_df$stat > 0),"color"] <- "1"
sub_df[(sub_df$weight > 0 & sub_df$stat < 0),"color"] <- "2"
sub_df[(sub_df$weight < 0 & sub_df$stat > 0),"color"] <- "2"
sub_df[(sub_df$weight < 0 & sub_df$stat < 0),"color"] <- "1"
sub_df[(percentile(sub_df$stat) < .95 & percentile(sub_df$stat) > .05),1] <- NA
print(paste("weights of ",names(weight_matrix)[j], sep = ""))
title <- paste("weights of ",names(weight_matrix)[j], sep = "")
scatterplot <- ggplot(sub_df, aes(x = weight, y = stat, color = color)) + geom_point() +
# scale_colour_manual(values = c("#15ff00","#ff0000","#c9c9c9")) + #green and red
scale_colour_manual(values = c("red","royalblue3","grey")) +
geom_label_repel(aes(label = ID)) +
ylim(minstat, maxstat) + theme_minimal() + theme(legend.position = "none") + geom_vline(xintercept = 0, linetype = 'dotted') + geom_hline(yintercept = 0, linetype = 'dotted') + labs(x = title, y = statName)
lay <- t(as.matrix(c(1,1,1,1,2)))
gg <- arrangeGrob(scatterplot, histo, nrow = 1, ncol = 2, layout_matrix = lay)
#grid.arrange(gg)
plot_list_pathways[[j-1]] <- gg
}
names(plot_list_pathways) <- names(weight_matrix[,-weightID])
plot_list_contrasts[[i-1]] <- plot_list_pathways
}
return(plot_list_contrasts)
}
full_targets <- as.data.frame(read_delim("~/Documents/Rebekka_CXCL4/src/full_targets.csv",
";", escape_double = FALSE, trim_ws = TRUE))
full_targets$`Mouse group` <- gsub(" ","_",full_targets$`Mouse group`)
full_targets$cellTypeorMarker <- gsub("CD41","MegaK",full_targets$cellTypeorMarker)
full_targets$cellTypeorMarker <- gsub("TdTomato_Gli1","Stromal",full_targets$cellTypeorMarker)
full_targets$`Mouse group` <- paste(full_targets$cellTypeorMarker,full_targets$`Mouse group`, sep = "_")
full_targets <- full_targets[order(full_targets$`Mouse group`),]
full_targets$replicates <- rep(c(1,2,3),8)
full_targets$sample <- paste(full_targets$`Mouse group`,full_targets$replicates, sep = "_")
targets <- full_targets[,c(12,10)]
names(targets) <- c("sample","condition")
count_file_list <- list.files("~/Documents/Rebekka_CXCL4/data/", full.names = T)
count_file_names <- gsub("[.]counts","",list.files("~/Documents/Rebekka_CXCL4/data/", full.names = F))
count_df_list <- list()
for(count_file in count_file_list)
{
count_df <- as.data.frame(read_delim(count_file,
"\t", escape_double = FALSE, col_names = FALSE,
trim_ws = TRUE))
count_df_list[[gsub("[.]counts","",count_file)]] <- count_df
}
i <- 1
for(count_df in count_df_list)
{
if(i == 1)
{
batches <- count_df
}
else
{
batches <- merge(batches,count_df, by = "X1", all = T)
}
i <- i+1
}
names(batches) <- c("ID", count_file_names)
batches <- batches[-c(1:5),]
batches <- batches[,c("ID",full_targets$`Sample Name`)]
names(batches) <- c("ID",targets$sample)
row.names(batches) <- batches$ID
batches <- batches[,-1]
SDs <- apply(batches,1,sd)
means <- apply(batches,1,mean)
#batches <- batches[means > 5 | SDs > 15,]
batches <- batches[means > 50,]
batches[batches == 0] <- 0.1
fit <- vsnMatrix(as.matrix(batches))
meanSdPlot(fit)
batches <- as.data.frame(predict(fit,as.matrix(batches)))
#targets$KO <- gsub("_EV","",targets$condition)
#targets$KO <- gsub("_TPO","",targets$KO)
comparisons_2 <- list("MegaK_EV" = c(1,-3), "MegaK_TPO" = c(2,-4), "Stromal_EV" = c(5,-7), "Stromal_TPO" = c(6,-8))
limmaRes_2 <- runLimma(batches,targets,comparisons_2)
ttop_list <- list()
for(i in 1:length(comparisons_2))
{
ttop_list[[i]] <- ttopFormatter(topTable(limmaRes_2[[1]], coef = i, number = length(batches[,1]), adjust.method = "fdr"))
}
names(ttop_list) <- names(comparisons_2)
View(ttop_list[[1]])
View(ttop_list[[2]])
# save(file = "~/Documents/Rebekka_CXCL4/results/ttop_list.RData", ttop_list)
##ONLY IF CHECK EFFECT OF MUTATION
for(i in 1:length(comparisons_2))
{
if( i == 1)
{
t_table <- ttop_list[[i]][,c(1,4)]
}
else
{
t_table <- merge(t_table,ttop_list[[i]][,c(1,4)], by = "ID")
}
}
names(t_table) <- c("ID",names(comparisons_2))
View(t_table)
View(t_table)
dorothea_regulon_mouse_v1 <- as.data.frame(read_csv("~/Documents/OMIC_tools/omicToolsTest/data/dorothea_regulon_mouse_v1.csv"))
dorothea_regulon_mouse_viper_AB <- df_to_viper_regulon(dorothea_regulon_mouse_v1[dorothea_regulon_mouse_v1$confidence %in% c("A","B"),c(3,1,4)])
TF_activity_viper <- runViper(ttop_list, regulon = dorothea_regulon_mouse_viper_AB)
makeViperResDf <- function(viperResList)
{
i <- 1
for (viperRes in viperResList)
{
viperScores <- viperRes
viperScores <- data.frame(viperScores)
print(viperScores)
viperScores$ID <- row.names(viperScores)
names(viperScores)[1] <- i
if (i == 1)
{
viperResDf <- viperScores
}
else
{
viperResDf <- merge(viperResDf, viperScores, by = "ID", all = T)
}
i <- i+1
}
if(i > 2)
{
names(viperResDf)[2:length(viperResDf[1,])] <- names(viperResList)
}
else
{
viperResDf <- viperResDf[,c(2,1)]
names(viperResDf) <- c("ID", names(viperResList))
}
return(viperResDf)
}
TF_activity_viper_df <- makeViperResDf(viperResList = TF_activity_viper)
row.names(TF_activity_viper_df) <- TF_activity_viper_df$ID
View(TF_activity_viper_df)
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,3]), decreasing = T),]
to_write <- as.data.frame(t(TF_activity_viper_df[,-1]))
to_write <- to_write[2,1:50]
View(to_write)
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,3]), decreasing = T),]
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,3]), decreasing = T),]
TF_activity_viper_df <- TF_activity_viper_df[(TF_activity_viper_df[,3]) > 1.7,]
to_write <- as.data.frame(t(TF_activity_viper_df[,-1]))
View(to_write)
TF_activity_viper_df <- makeViperResDf(viperResList = TF_activity_viper)
row.names(TF_activity_viper_df) <- TF_activity_viper_df$ID
View(TF_activity_viper_df)
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,3]), decreasing = T),]
View(TF_activity_viper_df)
to_write <- as.data.frame(t(TF_activity_viper_df[abs(TF_activity_viper_df[,3]) > 1.7,-1]))
to_write <- to_write[1,1:ifelse(length(to_write[1,]) > 50, 50, length(to_write[1,]))]
View(to_write)
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,2]), decreasing = T),]
to_write <- as.data.frame(t(TF_activity_viper_df[,-1]))
TF_activity_viper_df <- TF_activity_viper_df[order(abs(TF_activity_viper_df[,3]), decreasing = T),]
to_write <- as.data.frame(t(TF_activity_viper_df[abs(TF_activity_viper_df[,3]) > 1.7,-1]))
to_write <- to_write[2,1:ifelse(length(to_write[1,]) > 50, 50, length(to_write[1,]))]
write_tsv(to_write,"~/Dropbox/Rebekka_CXCL4/results/TF_megaK_TPO.tsv")
library(readr)
library(dplyr)
library(CARNIVAL)
Table1 <- as.data.frame(
read_delim("Dropbox/conformationomic_yeast_picotti_2020/data/Table1.csv", ";", escape_double = FALSE, locale = locale(decimal_mark = ",", grouping_mark = "."), trim_ws = TRUE))
changing_prots <- Table1[Table1$`Qvalue(LiP)` <= 0.05,]
changing_prots <- changing_prots[,c(2,8)]
batches <- changing_prots %>% group_by(Gene_name) %>% summarise_each(funs(min(abs(.))))
batches <- as.data.frame(batches)
##Import and generate a causal network from OMNIPATH
url <- paste0(
'http://omnipathdb.org/interactions?',
'fields=sources,references&genesymbols=1'
)
download_omnipath <- function(){
read.table(url, sep = '\t', header = TRUE)
}
omnipath <- download_omnipath()
omnipath <- omnipath[omnipath$is_directed != 0,]
omnipath <- omnipath[,c(3,5,4)]
batches <- batches[batches$Gene_name %in% omnipath$source_genesymbol | batches$Gene_name %in% omnipath$target_genesymbol,]
batches$zscore <- abs(qnorm(batches$`Pvalue(LiP)`))
carnival_input <- as.data.frame(t(batches[,c(3)]))
names(carnival_input) <- gsub("[-+{},;() ]","______",batches[,1])
omnipath$source_genesymbol <- gsub("[-+{},;() ]","______",omnipath$source_genesymbol)
omnipath$target_genesymbol <- gsub("[-+{},;() ]","______",omnipath$target_genesymbol)
omnipath <- omnipath[omnipath$source_genesymbol != omnipath$target_genesymbol,]
omnipath <- unique(omnipath)
write_tsv(carnival_input,"~/Dropbox/conformationomic_yeast_picotti_2020/results/changing_prots.tsv")
write_tsv(omnipath, "~/Dropbox/conformationomic_yeast_picotti_2020/supports/carni_causal_network.tsv")
setwd("~/Dropbox/conformationomic_yeast_picotti_2020/results/carnival/")
CARNIVAL_Result <- runCARNIVAL(CplexPath="~/Documents/cplex",
Result_dir=".",
CARNIVAL_example=NULL,
UP2GS=F,
netFile = "../../supports/carni_causal_network.tsv",
measFile = "../changing_prots.tsv",
inverseCR = T,
weightFile = NULL,
timelimit = 1000,
mipGAP = 0.15
) #11.24
CARNIVAL_Result <- runCARNIVAL(CplexPath="~/Documents/cplex",
Result_dir=".",
CARNIVAL_example=NULL,
UP2GS=F,
netFile = "../../supports/carni_causal_network.tsv",
measFile = "../changing_prots.tsv",
inverseCR = T,
weightFile = NULL,
timelimit = 1000,
mipGAP = 0.15
) #11.24
CARNIVAL_Result <- runCARNIVAL(CplexPath="~/Documents/cplex",
Result_dir=".",
CARNIVAL_example=NULL,
UP2GS=F,
netFile = "../../supports/carni_causal_network.tsv",
measFile = "../changing_prots.tsv",
inverseCR = T,
weightFile = NULL,
timelimit = 1500,
mipGAP = 0.15
) #11.24
View(omnipath)
